{
  "address": "0xfCfDf99E589bFB8360ccE319160E76Cb530146E8",
  "abi": [],
  "transactionHash": "0xc838ef2e2dfa628b22396ed3685bac2a7cd578c3148af3354b4b685d97568c8a",
  "receipt": {
    "to": null,
    "from": "0xB6C97C7060CF889D026b374623c941F74c7c3336",
    "contractAddress": "0xfCfDf99E589bFB8360ccE319160E76Cb530146E8",
    "transactionIndex": 6,
    "gasUsed": "72281",
    "logsBloom": "0x
    "blockHash": "0x531163ebe4f524e6741d02f04d84cad1780b1950f8dba71a699ff15d1795bdbd",
    "transactionHash": "0xc838ef2e2dfa628b22396ed3685bac2a7cd578c3148af3354b4b685d97568c8a",
    "logs": [],
    "blockNumber": 7510800,
    "cumulativeGasUsed": "675817",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "d6c3e961fa465d5ad94b8e7a55484d2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PriceConverter.sol\":\"PriceConverter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.15;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\nlibrary PriceConverter {\\r\\n    /** @notice Returns the latest price\\r\\n     *  @param priceFeed price feed\\r\\n     *  @return ethPrice price of ether\\r\\n     */\\r\\n    function getPrice(AggregatorV3Interface priceFeed)\\r\\n        internal\\r\\n        view\\r\\n        returns (uint256 ethPrice)\\r\\n    {\\r\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\r\\n        ethPrice = uint256(answer * 1e10);\\r\\n    }\\r\\n\\r\\n    /** @notice Returns ether amount in USD\\r\\n     *  @param ethAmount amount of ether\\r\\n     *  @param priceFeed price feed\\r\\n     *  @return ethAmountInUsd usd amount\\r\\n     */\\r\\n    function getConversionRate(\\r\\n        uint256 ethAmount,\\r\\n        AggregatorV3Interface priceFeed\\r\\n    ) internal view returns (uint256 ethAmountInUsd) {\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        ethAmountInUsd = (ethPrice * ethAmount) / 10**18;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x77c8d51f5682425f49992e899bb07611687912a122ef105e3dc9b14f0fe0b231\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60566050600b82828239805160001a6073146043577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203a36a049ac8449c70dcc4dc73863b81abdba4b2398aec494f053aeb3b0ed55cd64736f6c634300080f0033",
  "deployedBytecode": "0x73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212203a36a049ac8449c70dcc4dc73863b81abdba4b2398aec494f053aeb3b0ed55cd64736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}